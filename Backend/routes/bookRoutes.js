import express from 'express';
import Book from '../models/Book.js';
import Transaction from '../models/Transaction.js';
import User from '../models/User.js';


const router = express.Router();

// API to get all books
router.get('/all', async (req, res) => {
  try {
    const books = await Book.find();
    res.json(books);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
});

// API to search books by name or term
router.get('/search', async (req, res) => {
  const { name } = req.query;
  try {
    const books = await Book.find({ name: new RegExp(name, 'i') });
    res.json(books);
  } catch (err) {
    res.status(500).json({ error: 'Failed to search books' });
  }
});

// API to get books within a rent range
router.get('/filter-by-rent', async (req, res) => {
  const { minRent, maxRent } = req.query;
  try {
    const books = await Book.find({
      rentPerDay: { $gte: minRent, $lte: maxRent }
    });
    res.json(books);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
});

// API to get books by category + name/term + rent range
router.get('/filter-by-category-and-rent', async (req, res) => {
  const { category, name, minRent, maxRent } = req.query;
  try {
    const books = await Book.find({
      category,
      name: new RegExp(name, 'i'),
      rentPerDay: { $gte: minRent, $lte: maxRent }
    });
    res.json(books);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
});



// API to issue a book
router.post('/issue-book', async (req, res) => {
  const { bookName, userName, issueDate } = req.body;

  try {
    const book = await Book.findOne({ name: bookName });
    const user = await User.findOne({ name: userName });

    if (!book || !user) {
      return res.status(404).json({ error: 'Book or User not found' });
    }

    const newTransaction = new Transaction({
      bookId: book._id,
      userId: user._id,
      issueDate: new Date(issueDate)
    });

    await newTransaction.save();
    res.status(201).json({ message: 'Book issued successfully', transaction: newTransaction });
  } catch (err) {
    res.status(500).json({ error: 'Failed to issue book' });
  }
});

// API to return a book and calculate rent
router.post('/return-book', async (req, res) => {
  const { bookName, userName, returnDate } = req.body;

  try {
    const book = await Book.findOne({ name: bookName });
    const user = await User.findOne({ name: userName });

    if (!book || !user) {
      return res.status(404).json({ error: 'Book or User not found' });
    }

    const transaction = await Transaction.findOne({
      bookId: book._id,
      userId: user._id,
      returnDate: null // Book should not have been returned already
    });

    if (!transaction) {
      return res.status(404).json({ error: 'No active transaction found for this book and user' });
    }

    const issueDate = new Date(transaction.issueDate);
    const returnDateObj = new Date(returnDate);
    const daysRented = Math.ceil((returnDateObj - issueDate) / (1000 * 60 * 60 * 24)); // Calculate days
    const rent = book.rentPerDay * daysRented;

    transaction.returnDate = returnDateObj;
    await transaction.save();

    res.status(200).json({ message: 'Book returned successfully', daysRented, totalRent: rent });
  } catch (err) {
    res.status(500).json({ error: 'Failed to return book' });
  }
});

// API to get users who issued a specific book and current status
router.get('/issued-users', async (req, res) => {
  const { bookName } = req.query;
  try {
    const book = await Book.findOne({ name: new RegExp(bookName, 'i') }); // Using regex for partial matching
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }

    // Find all transactions for this book
    const transactions = await Transaction.find({ bookId: book._id }).populate('userId', 'name');
    const totalIssued = transactions.length;

    // Find the currently issued transaction (where returnDate is null)
    const currentTransaction = transactions.find(tx => !tx.returnDate);

    const response = {
      totalIssued,
      currentlyIssuedTo: currentTransaction ? currentTransaction.userId.name : 'Not issued currently',
      allUsers: transactions.map(tx => tx.userId.name)
    };

    res.status(200).json(response);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch issued users' });
  }
});


// API to get total rent generated by a book
router.get('/total-rent', async (req, res) => {
  const { bookName } = req.query;
  try {
    const book = await Book.findOne({ name: new RegExp(bookName, 'i') }); // Using regex for partial matching
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }

    // Find all transactions for this book
    const transactions = await Transaction.find({ bookId: book._id });

    // Calculate total rent
    let totalRent = 0;
    transactions.forEach(tx => {
      if (tx.returnDate) {
        const daysRented = Math.ceil((new Date(tx.returnDate) - new Date(tx.issueDate)) / (1000 * 60 * 60 * 24));
        totalRent += book.rentPerDay * daysRented;
      }
    });

    res.status(200).json({ totalRent });
  } catch (err) {
    res.status(500).json({ error: 'Failed to calculate total rent' });
  }
});


// API to get all books issued by a specific user
router.get('/issued-books', async (req, res) => {
  const { userName } = req.query;
  try {
    const user = await User.findOne({ name: new RegExp(userName, 'i') }); // Using regex for partial matching
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Find all transactions for this user
    const transactions = await Transaction.find({ userId: user._id }).populate('bookId', 'name');
    const issuedBooks = transactions.map(tx => tx.bookId.name);

    res.status(200).json({ issuedBooks });
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch issued books' });
  }
});


// API to get books issued within a date range
router.get('/issued-in-date-range', async (req, res) => {
  const { startDate, endDate } = req.query;
  try {
    const transactions = await Transaction.find({
      issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
    }).populate('bookId', 'name').populate('userId', 'name');

    const issuedBooks = transactions.map(tx => ({
      book: tx.bookId.name,
      issuedTo: tx.userId.name,
      issueDate: tx.issueDate
    }));

    res.status(200).json({ issuedBooks });
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch books issued in date range' });
  }
});

// API to list all users
router.get('/users', async (req, res) => {
  try {
    const users = await User.find(); // Fetch all users
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// API to list all books
router.get('/books', async (req, res) => {
  try {
    const books = await Book.find(); // Fetch all books
    res.status(200).json(books);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
});

export default router;